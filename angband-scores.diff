diff --git a/src/main.c b/src/main.c
index 46bd1fd8..15a1743f 100644
--- a/src/main.c
+++ b/src/main.c
@@ -19,6 +19,7 @@
 #include "angband.h"
 #include "init.h"
 #include "savefile.h"
+#include "score.h"
 #include "ui-command.h"
 #include "ui-display.h"
 #include "ui-game.h"
@@ -238,6 +239,107 @@ static void user_name(char *buf, size_t len, int id)
 
 #endif /* UNIX */
 
+/* copy of display_score_page() from ui-score.c, with printf() for stdout */
+/* usage: angband [-dscores=/path/to/scoresdir] -c */
+static void list_scores(void)
+{
+	struct high_score scores[MAX_HISCORES];
+	highscore_read(scores, N_ELEMENTS(scores));
+
+	/* required to fill in race and class in score entries */
+	init_angband();
+
+	int n, count, start;
+
+	/* Hack -- Count the high scores */
+	for (count = 0; count < MAX_HISCORES; count++)
+		if (!scores[count].what[0])
+			break;
+
+	start = 0;
+
+	/* Dump scores */
+	for (n = 0; start < count && n < count; start++, n++) {
+		const struct high_score *score = &scores[start];
+		/* byte attr; */
+		int clev, mlev, cdun, mdun;
+		const char *user, *gold, *when, *aged;
+		struct player_class *c;
+		struct player_race *r;
+		char out_val[160];
+		char tmp_val[160];
+
+		/* Hack -- indicate death in yellow */
+		/* attr = (start == highlight) ? COLOUR_L_GREEN : COLOUR_WHITE; */
+
+		c = player_id2class(atoi(score->p_c));
+		r = player_id2race(atoi(score->p_r));
+
+		/* Extract the level info */
+		clev = atoi(score->cur_lev);
+		mlev = atoi(score->max_lev);
+		cdun = atoi(score->cur_dun);
+		mdun = atoi(score->max_dun);
+
+		/* Hack -- extract the gold and such */
+		for (user = score->uid; isspace((unsigned char)*user); user++)
+			/* loop */;
+		for (when = score->day; isspace((unsigned char)*when); when++)
+			/* loop */;
+		for (gold = score->gold; isspace((unsigned char)*gold); gold++)
+			/* loop */;
+		for (aged = score->turns; isspace((unsigned char)*aged); aged++)
+			/* loop */;
+
+		/* Dump some info */
+		strnfmt(out_val, sizeof(out_val),
+				"%3d.%9s  %s the %s %s, level %d",
+				start + 1, score->pts, score->who,
+				r ? r->name : "<none>", c ? c->name : "<none>",
+				clev);
+
+		/* Append a "maximum level" */
+		if (mlev > clev)
+			my_strcat(out_val, format(" (Max %d)", mlev), sizeof(out_val));
+
+		/* Dump the first line */
+		/* c_put_str(attr, out_val, n * 4 + 2, 0); */
+		printf("%s\n",out_val);
+
+
+		/* Died where? */
+		if (!cdun)
+			strnfmt(out_val, sizeof(out_val), "Killed by %s in the town",
+					score->how);
+		else
+			strnfmt(out_val, sizeof(out_val),
+					"Killed by %s on dungeon level %d", score->how, cdun);
+
+		/* Append a "maximum level" */
+		if (mdun > cdun)
+			my_strcat(out_val, format(" (Max %d)", mdun), sizeof(out_val));
+
+		/* Dump the info */
+		/* c_put_str(attr, out_val, n * 4 + 3, 15); */
+		printf("%s\n",out_val);
+
+
+		/* Clean up standard encoded form of "when" */
+		if ((*when == '@') && strlen(when) == 9) {
+			strnfmt(tmp_val, sizeof(tmp_val), "%.4s-%.2s-%.2s", when + 1,
+					when + 5, when + 7);
+			when = tmp_val;
+		}
+
+		/* And still another line of info */
+		strnfmt(out_val, sizeof(out_val),
+				"(User %s, Date %s, Gold %s, Turn %s).",
+				user, when, gold, aged);
+		/* c_put_str(attr, out_val, n * 4 + 4, 15); */
+		printf("%s\n\n",out_val);
+	}
+}
+
 
 /**
  * List all savefiles this player can access.
@@ -360,6 +462,10 @@ int main(int argc, char *argv[])
 				list_saves();
 				exit(0);
 
+			case 'c':
+				list_scores();
+				exit(0);
+
 			case 'n':
 				new_game = true;
 				break;
